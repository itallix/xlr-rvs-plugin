buildscript {
    repositories {
        mavenLocal()
        ["public", "thirdparty", "releases"].each { r ->
            maven {
                credentials {
                    username nexusUserName
                    password nexusPassword
                }
                url "${nexusBaseUrl}/repositories/${r}"
            }
        }
    }

    dependencies {
        classpath "com.xebialabs.gradle.plugins:gradle-xl-plugins-plugin:${xlPluginsPluginVersion}"
        classpath "com.moowork.gradle:gradle-node-plugin:1.1.1"
        classpath "com.xebialabs.gradle.plugins.xlrelease:gradle-xl-release-plugin-plugin:${xlReleasePluginPluginVersion}"
    }
}
plugins{
    id "com.github.hierynomus.license" version "0.14.0"
}

apply plugin: 'com.github.hierynomus.license'
apply plugin: 'scala'
apply plugin: 'maven'
apply plugin: 'com.moowork.node'
apply plugin: 'groovy'
apply plugin: 'com.xebialabs.xl-release.plugin'
apply plugin: 'xebialabs.root.opinions'
apply plugin: 'xebialabs.opinions'
apply plugin: 'com.xebialabs.dependency'

group 'com.xebialabs.xlrelease.plugins'
archivesBaseName = "xlr-rvs-plugin"

node {
    version = '6.11.5'
    yarnVersion = '0.22.0'
    npmVersion= '3.10.9'
    download = true
    nodeModulesDir = file("${rootProject.projectDir}")
}

dependencies {
    compile 'org.scala-lang:scala-library:2.12.3'
    compile "com.xebialabs.xlrelease:xlr-server:$xlReleaseVersion"
    compile "com.xebialabs.xlrelease.modules:xlr-reports-module:$xlReleaseVersion"
//    compile fileTree(dir: "${xlReleasePlugin.xlReleaseHome}/lib", includes: ['*.jar'])
}

dependencyManagement {
    importConf "com.xebialabs.xl-platform:xl-reference:${xlPlatformVersion}"
}

sourceSets {
    // js are processed by webpack
    main {
        scala.srcDirs = ["src/main/scala"]
        resources {
            exclude '**/*.js'
        }
    }
    test {
        resources {
            srcDirs = ["src/test/resources"]
            exclude '**/*.js'
        }
    }
}

task yarnRunBuild(type: YarnTask) {
    args = ['run', 'build']
}

yarnRunBuild.dependsOn yarn_install
processResources.dependsOn yarnRunBuild

license {
    header project.file('HEADER')
    ignoreFailures false
    excludes(["**/*.json", "**/*.yaml", "**/*.yml"])
}

task licenseFormatJs(type: com.hierynomus.gradle.license.tasks.LicenseFormat) {
    source = fileTree(dir: "src").include("**/*.js")
}
licenseFormat.dependsOn licenseFormatJs

task licenseCheckJs(type: com.hierynomus.gradle.license.tasks.LicenseCheck) {
    source = fileTree(dir: "src").include("**/*.js")
}
